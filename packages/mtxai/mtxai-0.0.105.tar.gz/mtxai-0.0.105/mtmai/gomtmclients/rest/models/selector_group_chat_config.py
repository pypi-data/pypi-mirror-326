# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from mtmai.gomtmclients.rest.models.agent_config import AgentConfig
from mtmai.gomtmclients.rest.models.model_config import ModelConfig
from mtmai.gomtmclients.rest.models.termination_config import TerminationConfig
from typing import Optional, Set
from typing_extensions import Self

class SelectorGroupChatConfig(BaseModel):
    """
    SelectorGroupChatConfig
    """ # noqa: E501
    component_type: StrictStr
    version: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    participants: Optional[List[AgentConfig]] = None
    team_type: Optional[StrictStr] = None
    termination_condition: Optional[TerminationConfig] = None
    selector_prompt: Optional[StrictStr] = None
    model_client: Optional[ModelConfig] = None
    __properties: ClassVar[List[str]] = ["component_type", "version", "description", "name", "participants", "team_type", "termination_condition", "selector_prompt", "model_client"]

    @field_validator('team_type')
    def team_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SelectorGroupChat']):
            raise ValueError("must be one of enum values ('SelectorGroupChat')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SelectorGroupChatConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in participants (list)
        _items = []
        if self.participants:
            for _item_participants in self.participants:
                if _item_participants:
                    _items.append(_item_participants.to_dict())
            _dict['participants'] = _items
        # override the default output from pydantic by calling `to_dict()` of termination_condition
        if self.termination_condition:
            _dict['termination_condition'] = self.termination_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_client
        if self.model_client:
            _dict['model_client'] = self.model_client.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SelectorGroupChatConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "component_type": obj.get("component_type"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "participants": [AgentConfig.from_dict(_item) for _item in obj["participants"]] if obj.get("participants") is not None else None,
            "team_type": obj.get("team_type"),
            "termination_condition": TerminationConfig.from_dict(obj["termination_condition"]) if obj.get("termination_condition") is not None else None,
            "selector_prompt": obj.get("selector_prompt"),
            "model_client": ModelConfig.from_dict(obj["model_client"]) if obj.get("model_client") is not None else None
        })
        return _obj


