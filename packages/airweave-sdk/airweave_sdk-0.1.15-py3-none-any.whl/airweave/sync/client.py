# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.list_syncs_sync_get_response import ListSyncsSyncGetResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.sync import Sync
from ..core.jsonable_encoder import jsonable_encoder
from ..types.sync_job import SyncJob
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SyncClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_syncs(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        with_source_connection: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSyncsSyncGetResponse:
        """
        List all syncs for the current user.

        Parameters
        ----------
        skip : typing.Optional[int]

        limit : typing.Optional[int]

        with_source_connection : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSyncsSyncGetResponse
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.sync.list_syncs()
        """
        _response = self._client_wrapper.httpx_client.request(
            "sync/",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
                "with_source_connection": with_source_connection,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListSyncsSyncGetResponse,
                    parse_obj_as(
                        type_=ListSyncsSyncGetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_sync(
        self,
        *,
        name: str,
        source_connection_id: str,
        description: typing.Optional[str] = OMIT,
        destination_connection_id: typing.Optional[str] = OMIT,
        embedding_model_connection_id: typing.Optional[str] = OMIT,
        cron_schedule: typing.Optional[str] = OMIT,
        white_label_id: typing.Optional[str] = OMIT,
        white_label_user_identifier: typing.Optional[str] = OMIT,
        sync_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        run_immediately: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Sync:
        """
        Create a new sync configuration.

        Parameters
        ----------
        name : str

        source_connection_id : str

        description : typing.Optional[str]

        destination_connection_id : typing.Optional[str]

        embedding_model_connection_id : typing.Optional[str]

        cron_schedule : typing.Optional[str]

        white_label_id : typing.Optional[str]

        white_label_user_identifier : typing.Optional[str]

        sync_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        run_immediately : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Sync
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.sync.create_sync(
            name="name",
            source_connection_id="source_connection_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "sync/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "source_connection_id": source_connection_id,
                "destination_connection_id": destination_connection_id,
                "embedding_model_connection_id": embedding_model_connection_id,
                "cron_schedule": cron_schedule,
                "white_label_id": white_label_id,
                "white_label_user_identifier": white_label_user_identifier,
                "sync_metadata": sync_metadata,
                "run_immediately": run_immediately,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Sync,
                    parse_obj_as(
                        type_=Sync,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_sync(self, sync_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Sync:
        """
        Get a specific sync by ID.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Sync
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.sync.get_sync(
            sync_id="sync_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sync/{jsonable_encoder(sync_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Sync,
                    parse_obj_as(
                        type_=Sync,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_sync(
        self,
        sync_id: str,
        *,
        delete_data: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Sync:
        """
        Delete a sync configuration and optionally its associated data.

        Parameters
        ----------
        sync_id : str

        delete_data : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Sync
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.sync.delete_sync(
            sync_id="sync_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sync/{jsonable_encoder(sync_id)}",
            method="DELETE",
            params={
                "delete_data": delete_data,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Sync,
                    parse_obj_as(
                        type_=Sync,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def run_sync(self, sync_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> SyncJob:
        """
        Trigger a sync run.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncJob
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.sync.run_sync(
            sync_id="sync_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sync/{jsonable_encoder(sync_id)}/run",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncJob,
                    parse_obj_as(
                        type_=SyncJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_sync_jobs(
        self, sync_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[SyncJob]:
        """
        List all jobs for a specific sync.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SyncJob]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.sync.list_sync_jobs(
            sync_id="sync_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sync/{jsonable_encoder(sync_id)}/jobs",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[SyncJob],
                    parse_obj_as(
                        type_=typing.List[SyncJob],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_sync_job(
        self, job_id: str, *, sync_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SyncJob:
        """
        Get details of a specific sync job.

        Parameters
        ----------
        job_id : str

        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncJob
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.sync.get_sync_job(
            job_id="job_id",
            sync_id="sync_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sync/job/{jsonable_encoder(job_id)}",
            method="GET",
            params={
                "sync_id": sync_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncJob,
                    parse_obj_as(
                        type_=SyncJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def subscribe_sync_job(
        self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Server-Sent Events (SSE) endpoint to subscribe to a sync job's progress.

        Parameters
        ----------
        job_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.sync.subscribe_sync_job(
            job_id="job_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sync/job/{jsonable_encoder(job_id)}/subscribe",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSyncClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_syncs(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        with_source_connection: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSyncsSyncGetResponse:
        """
        List all syncs for the current user.

        Parameters
        ----------
        skip : typing.Optional[int]

        limit : typing.Optional[int]

        with_source_connection : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSyncsSyncGetResponse
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sync.list_syncs()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "sync/",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
                "with_source_connection": with_source_connection,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListSyncsSyncGetResponse,
                    parse_obj_as(
                        type_=ListSyncsSyncGetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_sync(
        self,
        *,
        name: str,
        source_connection_id: str,
        description: typing.Optional[str] = OMIT,
        destination_connection_id: typing.Optional[str] = OMIT,
        embedding_model_connection_id: typing.Optional[str] = OMIT,
        cron_schedule: typing.Optional[str] = OMIT,
        white_label_id: typing.Optional[str] = OMIT,
        white_label_user_identifier: typing.Optional[str] = OMIT,
        sync_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        run_immediately: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Sync:
        """
        Create a new sync configuration.

        Parameters
        ----------
        name : str

        source_connection_id : str

        description : typing.Optional[str]

        destination_connection_id : typing.Optional[str]

        embedding_model_connection_id : typing.Optional[str]

        cron_schedule : typing.Optional[str]

        white_label_id : typing.Optional[str]

        white_label_user_identifier : typing.Optional[str]

        sync_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        run_immediately : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Sync
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sync.create_sync(
                name="name",
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "sync/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "source_connection_id": source_connection_id,
                "destination_connection_id": destination_connection_id,
                "embedding_model_connection_id": embedding_model_connection_id,
                "cron_schedule": cron_schedule,
                "white_label_id": white_label_id,
                "white_label_user_identifier": white_label_user_identifier,
                "sync_metadata": sync_metadata,
                "run_immediately": run_immediately,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Sync,
                    parse_obj_as(
                        type_=Sync,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_sync(self, sync_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Sync:
        """
        Get a specific sync by ID.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Sync
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sync.get_sync(
                sync_id="sync_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sync/{jsonable_encoder(sync_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Sync,
                    parse_obj_as(
                        type_=Sync,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_sync(
        self,
        sync_id: str,
        *,
        delete_data: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Sync:
        """
        Delete a sync configuration and optionally its associated data.

        Parameters
        ----------
        sync_id : str

        delete_data : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Sync
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sync.delete_sync(
                sync_id="sync_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sync/{jsonable_encoder(sync_id)}",
            method="DELETE",
            params={
                "delete_data": delete_data,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Sync,
                    parse_obj_as(
                        type_=Sync,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def run_sync(self, sync_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> SyncJob:
        """
        Trigger a sync run.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncJob
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sync.run_sync(
                sync_id="sync_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sync/{jsonable_encoder(sync_id)}/run",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncJob,
                    parse_obj_as(
                        type_=SyncJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_sync_jobs(
        self, sync_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[SyncJob]:
        """
        List all jobs for a specific sync.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SyncJob]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sync.list_sync_jobs(
                sync_id="sync_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sync/{jsonable_encoder(sync_id)}/jobs",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[SyncJob],
                    parse_obj_as(
                        type_=typing.List[SyncJob],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_sync_job(
        self, job_id: str, *, sync_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SyncJob:
        """
        Get details of a specific sync job.

        Parameters
        ----------
        job_id : str

        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncJob
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sync.get_sync_job(
                job_id="job_id",
                sync_id="sync_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sync/job/{jsonable_encoder(job_id)}",
            method="GET",
            params={
                "sync_id": sync_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncJob,
                    parse_obj_as(
                        type_=SyncJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def subscribe_sync_job(
        self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Server-Sent Events (SSE) endpoint to subscribe to a sync job's progress.

        Parameters
        ----------
        job_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sync.subscribe_sync_job(
                job_id="job_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sync/job/{jsonable_encoder(job_id)}/subscribe",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
