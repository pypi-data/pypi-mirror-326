# coding: utf-8

"""
    Canva Connect API

    API for building integrations with Canva via a REST api

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from canva_alpha_ti.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Reply(BaseModel):
    """
    A reply to a thread.
    """ # noqa: E501
    id: StrictStr = Field(description="The ID of the reply.")
    design_id: StrictStr = Field(description="The ID of the design that the thread for this reply is attached to.")
    thread_id: StrictStr = Field(description="The ID of the thread this reply is in.")
    author: User
    message: StrictStr = Field(description="The reply's message. Any user mentions are shown in the format `[user_id:team_id]`")
    mentions: Dict[str, Any] = Field(description="The Canva users mentioned in the comment.")
    created_at: StrictInt = Field(description="When the reply was created, as a Unix timestamp (in seconds since the Unix Epoch).")
    updated_at: StrictInt = Field(description="When the reply was last updated, as a Unix timestamp (in seconds since the Unix Epoch).")
    __properties: ClassVar[List[str]] = ["id", "design_id", "thread_id", "author", "message", "mentions", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reply from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reply from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "design_id": obj.get("design_id"),
            "thread_id": obj.get("thread_id"),
            "author": User.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "message": obj.get("message"),
            "mentions": obj.get("mentions"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


