# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from slack_ti.models.default_success_template import DefaultSuccessTemplate

from slack_ti.api_client import ApiClient, RequestSerialized
from slack_ti.api_response import ApiResponse
from slack_ti.rest import RESTResponseType


class AdminUsersSessionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def admin_users_session_invalidate(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.users:write`")],
        team_id: Annotated[StrictStr, Field(description="ID of the team that the session belongs to")],
        session_id: StrictInt,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_users_session_invalidate

        Invalidate a single session for a user by session_id

        :param token: Authentication token. Requires scope: `admin.users:write` (required)
        :type token: str
        :param team_id: ID of the team that the session belongs to (required)
        :type team_id: str
        :param session_id: (required)
        :type session_id: int
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_users_session_invalidate_serialize(
            token=token,
            team_id=team_id,
            session_id=session_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_users_session_invalidate_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.users:write`")],
        team_id: Annotated[StrictStr, Field(description="ID of the team that the session belongs to")],
        session_id: StrictInt,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_users_session_invalidate

        Invalidate a single session for a user by session_id

        :param token: Authentication token. Requires scope: `admin.users:write` (required)
        :type token: str
        :param team_id: ID of the team that the session belongs to (required)
        :type team_id: str
        :param session_id: (required)
        :type session_id: int
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_users_session_invalidate_serialize(
            token=token,
            team_id=team_id,
            session_id=session_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_users_session_invalidate_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.users:write`")],
        team_id: Annotated[StrictStr, Field(description="ID of the team that the session belongs to")],
        session_id: StrictInt,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_users_session_invalidate

        Invalidate a single session for a user by session_id

        :param token: Authentication token. Requires scope: `admin.users:write` (required)
        :type token: str
        :param team_id: ID of the team that the session belongs to (required)
        :type team_id: str
        :param session_id: (required)
        :type session_id: int
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_users_session_invalidate_serialize(
            token=token,
            team_id=team_id,
            session_id=session_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_users_session_invalidate_serialize(
        self,
        token,
        team_id,
        session_id,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        if team_id is not None:
            _form_params.append(('team_id', team_id))
        if session_id is not None:
            _form_params.append(('session_id', session_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded', 
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/admin.users.session.invalidate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def admin_users_session_reset(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.users:write`")],
        user_id: Annotated[StrictStr, Field(description="The ID of the user to wipe sessions for")],
        mobile_only: Annotated[Optional[StrictBool], Field(description="Only expire mobile sessions (default: false)")] = None,
        web_only: Annotated[Optional[StrictBool], Field(description="Only expire web sessions (default: false)")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_users_session_reset

        Wipes all valid sessions on all devices for a given user

        :param token: Authentication token. Requires scope: `admin.users:write` (required)
        :type token: str
        :param user_id: The ID of the user to wipe sessions for (required)
        :type user_id: str
        :param mobile_only: Only expire mobile sessions (default: false)
        :type mobile_only: bool
        :param web_only: Only expire web sessions (default: false)
        :type web_only: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_users_session_reset_serialize(
            token=token,
            user_id=user_id,
            mobile_only=mobile_only,
            web_only=web_only,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_users_session_reset_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.users:write`")],
        user_id: Annotated[StrictStr, Field(description="The ID of the user to wipe sessions for")],
        mobile_only: Annotated[Optional[StrictBool], Field(description="Only expire mobile sessions (default: false)")] = None,
        web_only: Annotated[Optional[StrictBool], Field(description="Only expire web sessions (default: false)")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_users_session_reset

        Wipes all valid sessions on all devices for a given user

        :param token: Authentication token. Requires scope: `admin.users:write` (required)
        :type token: str
        :param user_id: The ID of the user to wipe sessions for (required)
        :type user_id: str
        :param mobile_only: Only expire mobile sessions (default: false)
        :type mobile_only: bool
        :param web_only: Only expire web sessions (default: false)
        :type web_only: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_users_session_reset_serialize(
            token=token,
            user_id=user_id,
            mobile_only=mobile_only,
            web_only=web_only,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_users_session_reset_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.users:write`")],
        user_id: Annotated[StrictStr, Field(description="The ID of the user to wipe sessions for")],
        mobile_only: Annotated[Optional[StrictBool], Field(description="Only expire mobile sessions (default: false)")] = None,
        web_only: Annotated[Optional[StrictBool], Field(description="Only expire web sessions (default: false)")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_users_session_reset

        Wipes all valid sessions on all devices for a given user

        :param token: Authentication token. Requires scope: `admin.users:write` (required)
        :type token: str
        :param user_id: The ID of the user to wipe sessions for (required)
        :type user_id: str
        :param mobile_only: Only expire mobile sessions (default: false)
        :type mobile_only: bool
        :param web_only: Only expire web sessions (default: false)
        :type web_only: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_users_session_reset_serialize(
            token=token,
            user_id=user_id,
            mobile_only=mobile_only,
            web_only=web_only,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_users_session_reset_serialize(
        self,
        token,
        user_id,
        mobile_only,
        web_only,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        if user_id is not None:
            _form_params.append(('user_id', user_id))
        if mobile_only is not None:
            _form_params.append(('mobile_only', mobile_only))
        if web_only is not None:
            _form_params.append(('web_only', web_only))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded', 
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/admin.users.session.reset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )


