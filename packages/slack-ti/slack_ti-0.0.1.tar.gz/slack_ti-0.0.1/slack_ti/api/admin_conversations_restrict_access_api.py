# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from slack_ti.models.default_success_template import DefaultSuccessTemplate

from slack_ti.api_client import ApiClient, RequestSerialized
from slack_ti.api_response import ApiResponse
from slack_ti.rest import RESTResponseType


class AdminConversationsRestrictAccessApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def admin_conversations_restrict_access_add_group(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.conversations:write`")],
        group_id: Annotated[StrictStr, Field(description="The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.")],
        channel_id: Annotated[StrictStr, Field(description="The channel to link this group to.")],
        team_id: Annotated[Optional[StrictStr], Field(description="The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_conversations_restrict_access_add_group

        Add an allowlist of IDP groups for accessing a channel

        :param token: Authentication token. Requires scope: `admin.conversations:write` (required)
        :type token: str
        :param group_id: The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
        :type group_id: str
        :param channel_id: The channel to link this group to. (required)
        :type channel_id: str
        :param team_id: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
        :type team_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_conversations_restrict_access_add_group_serialize(
            token=token,
            group_id=group_id,
            channel_id=channel_id,
            team_id=team_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_conversations_restrict_access_add_group_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.conversations:write`")],
        group_id: Annotated[StrictStr, Field(description="The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.")],
        channel_id: Annotated[StrictStr, Field(description="The channel to link this group to.")],
        team_id: Annotated[Optional[StrictStr], Field(description="The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_conversations_restrict_access_add_group

        Add an allowlist of IDP groups for accessing a channel

        :param token: Authentication token. Requires scope: `admin.conversations:write` (required)
        :type token: str
        :param group_id: The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
        :type group_id: str
        :param channel_id: The channel to link this group to. (required)
        :type channel_id: str
        :param team_id: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
        :type team_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_conversations_restrict_access_add_group_serialize(
            token=token,
            group_id=group_id,
            channel_id=channel_id,
            team_id=team_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_conversations_restrict_access_add_group_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.conversations:write`")],
        group_id: Annotated[StrictStr, Field(description="The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.")],
        channel_id: Annotated[StrictStr, Field(description="The channel to link this group to.")],
        team_id: Annotated[Optional[StrictStr], Field(description="The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_conversations_restrict_access_add_group

        Add an allowlist of IDP groups for accessing a channel

        :param token: Authentication token. Requires scope: `admin.conversations:write` (required)
        :type token: str
        :param group_id: The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
        :type group_id: str
        :param channel_id: The channel to link this group to. (required)
        :type channel_id: str
        :param team_id: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
        :type team_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_conversations_restrict_access_add_group_serialize(
            token=token,
            group_id=group_id,
            channel_id=channel_id,
            team_id=team_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_conversations_restrict_access_add_group_serialize(
        self,
        token,
        group_id,
        channel_id,
        team_id,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if token is not None:
            _form_params.append(('token', token))
        if team_id is not None:
            _form_params.append(('team_id', team_id))
        if group_id is not None:
            _form_params.append(('group_id', group_id))
        if channel_id is not None:
            _form_params.append(('channel_id', channel_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/admin.conversations.restrictAccess.addGroup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def admin_conversations_restrict_access_list_groups(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.conversations:read`")],
        channel_id: StrictStr,
        team_id: Annotated[Optional[StrictStr], Field(description="The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_conversations_restrict_access_list_groups

        List all IDP Groups linked to a channel

        :param token: Authentication token. Requires scope: `admin.conversations:read` (required)
        :type token: str
        :param channel_id: (required)
        :type channel_id: str
        :param team_id: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
        :type team_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_conversations_restrict_access_list_groups_serialize(
            token=token,
            channel_id=channel_id,
            team_id=team_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_conversations_restrict_access_list_groups_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.conversations:read`")],
        channel_id: StrictStr,
        team_id: Annotated[Optional[StrictStr], Field(description="The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_conversations_restrict_access_list_groups

        List all IDP Groups linked to a channel

        :param token: Authentication token. Requires scope: `admin.conversations:read` (required)
        :type token: str
        :param channel_id: (required)
        :type channel_id: str
        :param team_id: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
        :type team_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_conversations_restrict_access_list_groups_serialize(
            token=token,
            channel_id=channel_id,
            team_id=team_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_conversations_restrict_access_list_groups_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.conversations:read`")],
        channel_id: StrictStr,
        team_id: Annotated[Optional[StrictStr], Field(description="The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_conversations_restrict_access_list_groups

        List all IDP Groups linked to a channel

        :param token: Authentication token. Requires scope: `admin.conversations:read` (required)
        :type token: str
        :param channel_id: (required)
        :type channel_id: str
        :param team_id: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
        :type team_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_conversations_restrict_access_list_groups_serialize(
            token=token,
            channel_id=channel_id,
            team_id=team_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_conversations_restrict_access_list_groups_serialize(
        self,
        token,
        channel_id,
        team_id,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if token is not None:
            
            _query_params.append(('token', token))
            
        if channel_id is not None:
            
            _query_params.append(('channel_id', channel_id))
            
        if team_id is not None:
            
            _query_params.append(('team_id', team_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/admin.conversations.restrictAccess.listGroups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def admin_conversations_restrict_access_remove_group(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.conversations:write`")],
        team_id: Annotated[StrictStr, Field(description="The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.")],
        group_id: Annotated[StrictStr, Field(description="The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.")],
        channel_id: Annotated[StrictStr, Field(description="The channel to remove the linked group from.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_conversations_restrict_access_remove_group

        Remove a linked IDP group linked from a private channel

        :param token: Authentication token. Requires scope: `admin.conversations:write` (required)
        :type token: str
        :param team_id: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
        :type team_id: str
        :param group_id: The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
        :type group_id: str
        :param channel_id: The channel to remove the linked group from. (required)
        :type channel_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_conversations_restrict_access_remove_group_serialize(
            token=token,
            team_id=team_id,
            group_id=group_id,
            channel_id=channel_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_conversations_restrict_access_remove_group_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.conversations:write`")],
        team_id: Annotated[StrictStr, Field(description="The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.")],
        group_id: Annotated[StrictStr, Field(description="The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.")],
        channel_id: Annotated[StrictStr, Field(description="The channel to remove the linked group from.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_conversations_restrict_access_remove_group

        Remove a linked IDP group linked from a private channel

        :param token: Authentication token. Requires scope: `admin.conversations:write` (required)
        :type token: str
        :param team_id: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
        :type team_id: str
        :param group_id: The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
        :type group_id: str
        :param channel_id: The channel to remove the linked group from. (required)
        :type channel_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_conversations_restrict_access_remove_group_serialize(
            token=token,
            team_id=team_id,
            group_id=group_id,
            channel_id=channel_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_conversations_restrict_access_remove_group_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.conversations:write`")],
        team_id: Annotated[StrictStr, Field(description="The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.")],
        group_id: Annotated[StrictStr, Field(description="The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.")],
        channel_id: Annotated[StrictStr, Field(description="The channel to remove the linked group from.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_conversations_restrict_access_remove_group

        Remove a linked IDP group linked from a private channel

        :param token: Authentication token. Requires scope: `admin.conversations:write` (required)
        :type token: str
        :param team_id: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
        :type team_id: str
        :param group_id: The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
        :type group_id: str
        :param channel_id: The channel to remove the linked group from. (required)
        :type channel_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_conversations_restrict_access_remove_group_serialize(
            token=token,
            team_id=team_id,
            group_id=group_id,
            channel_id=channel_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_conversations_restrict_access_remove_group_serialize(
        self,
        token,
        team_id,
        group_id,
        channel_id,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if token is not None:
            _form_params.append(('token', token))
        if team_id is not None:
            _form_params.append(('team_id', team_id))
        if group_id is not None:
            _form_params.append(('group_id', group_id))
        if channel_id is not None:
            _form_params.append(('channel_id', channel_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/admin.conversations.restrictAccess.removeGroup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )


