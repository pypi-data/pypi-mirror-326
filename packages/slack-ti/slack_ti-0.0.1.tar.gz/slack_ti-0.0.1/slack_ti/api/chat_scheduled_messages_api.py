# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from slack_ti.models.chat_scheduled_messages_list_schema import ChatScheduledMessagesListSchema

from slack_ti.api_client import ApiClient, RequestSerialized
from slack_ti.api_response import ApiResponse
from slack_ti.rest import RESTResponseType


class ChatScheduledMessagesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def chat_scheduled_messages_list(
        self,
        token: Annotated[Optional[StrictStr], Field(description="Authentication token. Requires scope: `none`")] = None,
        channel: Annotated[Optional[StrictStr], Field(description="The channel of the scheduled messages")] = None,
        latest: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="A UNIX timestamp of the latest value in the time range")] = None,
        oldest: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="A UNIX timestamp of the oldest value in the time range")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Maximum number of original entries to return.")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ChatScheduledMessagesListSchema:
        """chat_scheduled_messages_list

        Returns a list of scheduled messages.

        :param token: Authentication token. Requires scope: `none`
        :type token: str
        :param channel: The channel of the scheduled messages
        :type channel: str
        :param latest: A UNIX timestamp of the latest value in the time range
        :type latest: float
        :param oldest: A UNIX timestamp of the oldest value in the time range
        :type oldest: float
        :param limit: Maximum number of original entries to return.
        :type limit: int
        :param cursor: For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.
        :type cursor: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._chat_scheduled_messages_list_serialize(
            token=token,
            channel=channel,
            latest=latest,
            oldest=oldest,
            limit=limit,
            cursor=cursor,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChatScheduledMessagesListSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def chat_scheduled_messages_list_with_http_info(
        self,
        token: Annotated[Optional[StrictStr], Field(description="Authentication token. Requires scope: `none`")] = None,
        channel: Annotated[Optional[StrictStr], Field(description="The channel of the scheduled messages")] = None,
        latest: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="A UNIX timestamp of the latest value in the time range")] = None,
        oldest: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="A UNIX timestamp of the oldest value in the time range")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Maximum number of original entries to return.")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[ChatScheduledMessagesListSchema]:
        """chat_scheduled_messages_list

        Returns a list of scheduled messages.

        :param token: Authentication token. Requires scope: `none`
        :type token: str
        :param channel: The channel of the scheduled messages
        :type channel: str
        :param latest: A UNIX timestamp of the latest value in the time range
        :type latest: float
        :param oldest: A UNIX timestamp of the oldest value in the time range
        :type oldest: float
        :param limit: Maximum number of original entries to return.
        :type limit: int
        :param cursor: For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.
        :type cursor: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._chat_scheduled_messages_list_serialize(
            token=token,
            channel=channel,
            latest=latest,
            oldest=oldest,
            limit=limit,
            cursor=cursor,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChatScheduledMessagesListSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def chat_scheduled_messages_list_without_preload_content(
        self,
        token: Annotated[Optional[StrictStr], Field(description="Authentication token. Requires scope: `none`")] = None,
        channel: Annotated[Optional[StrictStr], Field(description="The channel of the scheduled messages")] = None,
        latest: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="A UNIX timestamp of the latest value in the time range")] = None,
        oldest: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="A UNIX timestamp of the oldest value in the time range")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Maximum number of original entries to return.")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """chat_scheduled_messages_list

        Returns a list of scheduled messages.

        :param token: Authentication token. Requires scope: `none`
        :type token: str
        :param channel: The channel of the scheduled messages
        :type channel: str
        :param latest: A UNIX timestamp of the latest value in the time range
        :type latest: float
        :param oldest: A UNIX timestamp of the oldest value in the time range
        :type oldest: float
        :param limit: Maximum number of original entries to return.
        :type limit: int
        :param cursor: For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.
        :type cursor: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._chat_scheduled_messages_list_serialize(
            token=token,
            channel=channel,
            latest=latest,
            oldest=oldest,
            limit=limit,
            cursor=cursor,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChatScheduledMessagesListSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _chat_scheduled_messages_list_serialize(
        self,
        token,
        channel,
        latest,
        oldest,
        limit,
        cursor,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if channel is not None:
            
            _query_params.append(('channel', channel))
            
        if latest is not None:
            
            _query_params.append(('latest', latest))
            
        if oldest is not None:
            
            _query_params.append(('oldest', oldest))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/chat.scheduledMessages.list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )


