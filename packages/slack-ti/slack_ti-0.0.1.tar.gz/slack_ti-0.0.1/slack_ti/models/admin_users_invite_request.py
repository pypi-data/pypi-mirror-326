# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdminUsersInviteRequest(BaseModel):
    """
    AdminUsersInviteRequest
    """ # noqa: E501
    team_id: StrictStr = Field(description="The ID (`T1234`) of the workspace.")
    email: StrictStr = Field(description="The email address of the person to invite.")
    channel_ids: StrictStr = Field(description="A comma-separated list of `channel_id`s for this user to join. At least one channel is required.")
    custom_message: Optional[StrictStr] = Field(default=None, description="An optional message to send to the user in the invite email.")
    real_name: Optional[StrictStr] = Field(default=None, description="Full name of the user.")
    resend: Optional[StrictBool] = Field(default=None, description="Allow this invite to be resent in the future if a user has not signed up yet. (default: false)")
    is_restricted: Optional[StrictBool] = Field(default=None, description="Is this user a multi-channel guest user? (default: false)")
    is_ultra_restricted: Optional[StrictBool] = Field(default=None, description="Is this user a single channel guest user? (default: false)")
    guest_expiration_ts: Optional[StrictStr] = Field(default=None, description="Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.")
    __properties: ClassVar[List[str]] = ["team_id", "email", "channel_ids", "custom_message", "real_name", "resend", "is_restricted", "is_ultra_restricted", "guest_expiration_ts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminUsersInviteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminUsersInviteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "team_id": obj.get("team_id"),
            "email": obj.get("email"),
            "channel_ids": obj.get("channel_ids"),
            "custom_message": obj.get("custom_message"),
            "real_name": obj.get("real_name"),
            "resend": obj.get("resend"),
            "is_restricted": obj.get("is_restricted"),
            "is_ultra_restricted": obj.get("is_ultra_restricted"),
            "guest_expiration_ts": obj.get("guest_expiration_ts")
        })
        return _obj


