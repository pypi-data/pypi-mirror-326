# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ChatScheduleMessageRequest(BaseModel):
    """
    ChatScheduleMessageRequest
    """ # noqa: E501
    channel: Optional[StrictStr] = Field(default=None, description="Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.")
    text: Optional[StrictStr] = Field(default=None, description="How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.")
    post_at: Optional[StrictStr] = Field(default=None, description="Unix EPOCH timestamp of time in future to send the message.")
    parse: Optional[StrictStr] = Field(default=None, description="Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).")
    as_user: Optional[StrictBool] = Field(default=None, description="Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).")
    link_names: Optional[StrictBool] = Field(default=None, description="Find and link channel names and usernames.")
    attachments: Optional[StrictStr] = Field(default=None, description="A JSON-based array of structured attachments, presented as a URL-encoded string.")
    blocks: Optional[StrictStr] = Field(default=None, description="A JSON-based array of structured blocks, presented as a URL-encoded string.")
    unfurl_links: Optional[StrictBool] = Field(default=None, description="Pass true to enable unfurling of primarily text-based content.")
    unfurl_media: Optional[StrictBool] = Field(default=None, description="Pass false to disable unfurling of media content.")
    thread_ts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.")
    reply_broadcast: Optional[StrictBool] = Field(default=None, description="Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.")
    __properties: ClassVar[List[str]] = ["channel", "text", "post_at", "parse", "as_user", "link_names", "attachments", "blocks", "unfurl_links", "unfurl_media", "thread_ts", "reply_broadcast"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatScheduleMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatScheduleMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "text": obj.get("text"),
            "post_at": obj.get("post_at"),
            "parse": obj.get("parse"),
            "as_user": obj.get("as_user"),
            "link_names": obj.get("link_names"),
            "attachments": obj.get("attachments"),
            "blocks": obj.get("blocks"),
            "unfurl_links": obj.get("unfurl_links"),
            "unfurl_media": obj.get("unfurl_media"),
            "thread_ts": obj.get("thread_ts"),
            "reply_broadcast": obj.get("reply_broadcast")
        })
        return _obj


