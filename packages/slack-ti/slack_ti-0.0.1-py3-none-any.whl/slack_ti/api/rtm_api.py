# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from slack_ti.models.rtm_connect_schema import RtmConnectSchema

from slack_ti.api_client import ApiClient, RequestSerialized
from slack_ti.api_response import ApiResponse
from slack_ti.rest import RESTResponseType


class RtmApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rtm_connect(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `rtm:stream`")],
        batch_presence_aware: Annotated[Optional[StrictBool], Field(description="Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).")] = None,
        presence_sub: Annotated[Optional[StrictBool], Field(description="Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RtmConnectSchema:
        """rtm_connect

        Starts a Real Time Messaging session.

        :param token: Authentication token. Requires scope: `rtm:stream` (required)
        :type token: str
        :param batch_presence_aware: Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).
        :type batch_presence_aware: bool
        :param presence_sub: Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).
        :type presence_sub: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rtm_connect_serialize(
            token=token,
            batch_presence_aware=batch_presence_aware,
            presence_sub=presence_sub,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RtmConnectSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rtm_connect_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `rtm:stream`")],
        batch_presence_aware: Annotated[Optional[StrictBool], Field(description="Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).")] = None,
        presence_sub: Annotated[Optional[StrictBool], Field(description="Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[RtmConnectSchema]:
        """rtm_connect

        Starts a Real Time Messaging session.

        :param token: Authentication token. Requires scope: `rtm:stream` (required)
        :type token: str
        :param batch_presence_aware: Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).
        :type batch_presence_aware: bool
        :param presence_sub: Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).
        :type presence_sub: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rtm_connect_serialize(
            token=token,
            batch_presence_aware=batch_presence_aware,
            presence_sub=presence_sub,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RtmConnectSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rtm_connect_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `rtm:stream`")],
        batch_presence_aware: Annotated[Optional[StrictBool], Field(description="Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).")] = None,
        presence_sub: Annotated[Optional[StrictBool], Field(description="Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """rtm_connect

        Starts a Real Time Messaging session.

        :param token: Authentication token. Requires scope: `rtm:stream` (required)
        :type token: str
        :param batch_presence_aware: Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).
        :type batch_presence_aware: bool
        :param presence_sub: Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).
        :type presence_sub: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rtm_connect_serialize(
            token=token,
            batch_presence_aware=batch_presence_aware,
            presence_sub=presence_sub,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RtmConnectSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _rtm_connect_serialize(
        self,
        token,
        batch_presence_aware,
        presence_sub,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if token is not None:
            
            _query_params.append(('token', token))
            
        if batch_presence_aware is not None:
            
            _query_params.append(('batch_presence_aware', batch_presence_aware))
            
        if presence_sub is not None:
            
            _query_params.append(('presence_sub', presence_sub))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rtm.connect',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )


