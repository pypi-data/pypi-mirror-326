# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from slack_ti.models.default_success_template import DefaultSuccessTemplate

from slack_ti.api_client import ApiClient, RequestSerialized
from slack_ti.api_response import ApiResponse
from slack_ti.rest import RESTResponseType


class ViewsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def views_open(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        trigger_id: Annotated[StrictStr, Field(description="Exchange a trigger to post to the user.")],
        view: Annotated[StrictStr, Field(description="A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """views_open

        Open a view for a user.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param trigger_id: Exchange a trigger to post to the user. (required)
        :type trigger_id: str
        :param view: A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
        :type view: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_open_serialize(
            token=token,
            trigger_id=trigger_id,
            view=view,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def views_open_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        trigger_id: Annotated[StrictStr, Field(description="Exchange a trigger to post to the user.")],
        view: Annotated[StrictStr, Field(description="A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """views_open

        Open a view for a user.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param trigger_id: Exchange a trigger to post to the user. (required)
        :type trigger_id: str
        :param view: A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
        :type view: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_open_serialize(
            token=token,
            trigger_id=trigger_id,
            view=view,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def views_open_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        trigger_id: Annotated[StrictStr, Field(description="Exchange a trigger to post to the user.")],
        view: Annotated[StrictStr, Field(description="A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """views_open

        Open a view for a user.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param trigger_id: Exchange a trigger to post to the user. (required)
        :type trigger_id: str
        :param view: A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
        :type view: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_open_serialize(
            token=token,
            trigger_id=trigger_id,
            view=view,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _views_open_serialize(
        self,
        token,
        trigger_id,
        view,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if trigger_id is not None:
            
            _query_params.append(('trigger_id', trigger_id))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/views.open',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def views_publish(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        user_id: Annotated[StrictStr, Field(description="`id` of the user you want publish a view to.")],
        view: Annotated[StrictStr, Field(description="A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.")],
        hash: Annotated[Optional[StrictStr], Field(description="A string that represents view state to protect against possible race conditions.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """views_publish

        Publish a static view for a User.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param user_id: `id` of the user you want publish a view to. (required)
        :type user_id: str
        :param view: A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
        :type view: str
        :param hash: A string that represents view state to protect against possible race conditions.
        :type hash: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_publish_serialize(
            token=token,
            user_id=user_id,
            view=view,
            hash=hash,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def views_publish_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        user_id: Annotated[StrictStr, Field(description="`id` of the user you want publish a view to.")],
        view: Annotated[StrictStr, Field(description="A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.")],
        hash: Annotated[Optional[StrictStr], Field(description="A string that represents view state to protect against possible race conditions.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """views_publish

        Publish a static view for a User.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param user_id: `id` of the user you want publish a view to. (required)
        :type user_id: str
        :param view: A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
        :type view: str
        :param hash: A string that represents view state to protect against possible race conditions.
        :type hash: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_publish_serialize(
            token=token,
            user_id=user_id,
            view=view,
            hash=hash,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def views_publish_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        user_id: Annotated[StrictStr, Field(description="`id` of the user you want publish a view to.")],
        view: Annotated[StrictStr, Field(description="A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.")],
        hash: Annotated[Optional[StrictStr], Field(description="A string that represents view state to protect against possible race conditions.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """views_publish

        Publish a static view for a User.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param user_id: `id` of the user you want publish a view to. (required)
        :type user_id: str
        :param view: A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
        :type view: str
        :param hash: A string that represents view state to protect against possible race conditions.
        :type hash: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_publish_serialize(
            token=token,
            user_id=user_id,
            view=view,
            hash=hash,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _views_publish_serialize(
        self,
        token,
        user_id,
        view,
        hash,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if user_id is not None:
            
            _query_params.append(('user_id', user_id))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        if hash is not None:
            
            _query_params.append(('hash', hash))
            
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/views.publish',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def views_push(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        trigger_id: Annotated[StrictStr, Field(description="Exchange a trigger to post to the user.")],
        view: Annotated[StrictStr, Field(description="A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """views_push

        Push a view onto the stack of a root view.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param trigger_id: Exchange a trigger to post to the user. (required)
        :type trigger_id: str
        :param view: A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
        :type view: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_push_serialize(
            token=token,
            trigger_id=trigger_id,
            view=view,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def views_push_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        trigger_id: Annotated[StrictStr, Field(description="Exchange a trigger to post to the user.")],
        view: Annotated[StrictStr, Field(description="A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """views_push

        Push a view onto the stack of a root view.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param trigger_id: Exchange a trigger to post to the user. (required)
        :type trigger_id: str
        :param view: A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
        :type view: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_push_serialize(
            token=token,
            trigger_id=trigger_id,
            view=view,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def views_push_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        trigger_id: Annotated[StrictStr, Field(description="Exchange a trigger to post to the user.")],
        view: Annotated[StrictStr, Field(description="A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """views_push

        Push a view onto the stack of a root view.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param trigger_id: Exchange a trigger to post to the user. (required)
        :type trigger_id: str
        :param view: A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
        :type view: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_push_serialize(
            token=token,
            trigger_id=trigger_id,
            view=view,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _views_push_serialize(
        self,
        token,
        trigger_id,
        view,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if trigger_id is not None:
            
            _query_params.append(('trigger_id', trigger_id))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/views.push',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def views_update(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        view_id: Annotated[Optional[StrictStr], Field(description="A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.")] = None,
        external_id: Annotated[Optional[StrictStr], Field(description="A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="A [view object](/reference/surfaces/views). This must be a JSON-encoded string.")] = None,
        hash: Annotated[Optional[StrictStr], Field(description="A string that represents view state to protect against possible race conditions.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """views_update

        Update an existing view.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param view_id: A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.
        :type view_id: str
        :param external_id: A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.
        :type external_id: str
        :param view: A [view object](/reference/surfaces/views). This must be a JSON-encoded string.
        :type view: str
        :param hash: A string that represents view state to protect against possible race conditions.
        :type hash: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_update_serialize(
            token=token,
            view_id=view_id,
            external_id=external_id,
            view=view,
            hash=hash,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def views_update_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        view_id: Annotated[Optional[StrictStr], Field(description="A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.")] = None,
        external_id: Annotated[Optional[StrictStr], Field(description="A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="A [view object](/reference/surfaces/views). This must be a JSON-encoded string.")] = None,
        hash: Annotated[Optional[StrictStr], Field(description="A string that represents view state to protect against possible race conditions.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """views_update

        Update an existing view.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param view_id: A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.
        :type view_id: str
        :param external_id: A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.
        :type external_id: str
        :param view: A [view object](/reference/surfaces/views). This must be a JSON-encoded string.
        :type view: str
        :param hash: A string that represents view state to protect against possible race conditions.
        :type hash: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_update_serialize(
            token=token,
            view_id=view_id,
            external_id=external_id,
            view=view,
            hash=hash,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def views_update_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `none`")],
        view_id: Annotated[Optional[StrictStr], Field(description="A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.")] = None,
        external_id: Annotated[Optional[StrictStr], Field(description="A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="A [view object](/reference/surfaces/views). This must be a JSON-encoded string.")] = None,
        hash: Annotated[Optional[StrictStr], Field(description="A string that represents view state to protect against possible race conditions.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """views_update

        Update an existing view.

        :param token: Authentication token. Requires scope: `none` (required)
        :type token: str
        :param view_id: A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.
        :type view_id: str
        :param external_id: A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.
        :type external_id: str
        :param view: A [view object](/reference/surfaces/views). This must be a JSON-encoded string.
        :type view: str
        :param hash: A string that represents view state to protect against possible race conditions.
        :type hash: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._views_update_serialize(
            token=token,
            view_id=view_id,
            external_id=external_id,
            view=view,
            hash=hash,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _views_update_serialize(
        self,
        token,
        view_id,
        external_id,
        view,
        hash,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if view_id is not None:
            
            _query_params.append(('view_id', view_id))
            
        if external_id is not None:
            
            _query_params.append(('external_id', external_id))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        if hash is not None:
            
            _query_params.append(('hash', hash))
            
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/views.update',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )


