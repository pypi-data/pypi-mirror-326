# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from slack_ti.models.reactions_add_schema import ReactionsAddSchema
from slack_ti.models.reactions_list_schema import ReactionsListSchema
from slack_ti.models.reactions_remove_schema import ReactionsRemoveSchema

from slack_ti.api_client import ApiClient, RequestSerialized
from slack_ti.api_response import ApiResponse
from slack_ti.rest import RESTResponseType


class ReactionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def reactions_add(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:write`")],
        channel: Annotated[StrictStr, Field(description="Channel where the message to add reaction to was posted.")],
        name: Annotated[StrictStr, Field(description="Reaction (emoji) name.")],
        timestamp: Annotated[StrictStr, Field(description="Timestamp of the message to add reaction to.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ReactionsAddSchema:
        """reactions_add

        Adds a reaction to an item.

        :param token: Authentication token. Requires scope: `reactions:write` (required)
        :type token: str
        :param channel: Channel where the message to add reaction to was posted. (required)
        :type channel: str
        :param name: Reaction (emoji) name. (required)
        :type name: str
        :param timestamp: Timestamp of the message to add reaction to. (required)
        :type timestamp: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_add_serialize(
            token=token,
            channel=channel,
            name=name,
            timestamp=timestamp,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReactionsAddSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reactions_add_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:write`")],
        channel: Annotated[StrictStr, Field(description="Channel where the message to add reaction to was posted.")],
        name: Annotated[StrictStr, Field(description="Reaction (emoji) name.")],
        timestamp: Annotated[StrictStr, Field(description="Timestamp of the message to add reaction to.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[ReactionsAddSchema]:
        """reactions_add

        Adds a reaction to an item.

        :param token: Authentication token. Requires scope: `reactions:write` (required)
        :type token: str
        :param channel: Channel where the message to add reaction to was posted. (required)
        :type channel: str
        :param name: Reaction (emoji) name. (required)
        :type name: str
        :param timestamp: Timestamp of the message to add reaction to. (required)
        :type timestamp: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_add_serialize(
            token=token,
            channel=channel,
            name=name,
            timestamp=timestamp,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReactionsAddSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reactions_add_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:write`")],
        channel: Annotated[StrictStr, Field(description="Channel where the message to add reaction to was posted.")],
        name: Annotated[StrictStr, Field(description="Reaction (emoji) name.")],
        timestamp: Annotated[StrictStr, Field(description="Timestamp of the message to add reaction to.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """reactions_add

        Adds a reaction to an item.

        :param token: Authentication token. Requires scope: `reactions:write` (required)
        :type token: str
        :param channel: Channel where the message to add reaction to was posted. (required)
        :type channel: str
        :param name: Reaction (emoji) name. (required)
        :type name: str
        :param timestamp: Timestamp of the message to add reaction to. (required)
        :type timestamp: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_add_serialize(
            token=token,
            channel=channel,
            name=name,
            timestamp=timestamp,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReactionsAddSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _reactions_add_serialize(
        self,
        token,
        channel,
        name,
        timestamp,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        if channel is not None:
            _form_params.append(('channel', channel))
        if name is not None:
            _form_params.append(('name', name))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded', 
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/reactions.add',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def reactions_get(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:read`")],
        channel: Annotated[Optional[StrictStr], Field(description="Channel where the message to get reactions for was posted.")] = None,
        file: Annotated[Optional[StrictStr], Field(description="File to get reactions for.")] = None,
        file_comment: Annotated[Optional[StrictStr], Field(description="File comment to get reactions for.")] = None,
        full: Annotated[Optional[StrictBool], Field(description="If true always return the complete reaction list.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp of the message to get reactions for.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> List[str]:
        """reactions_get

        Gets reactions for an item.

        :param token: Authentication token. Requires scope: `reactions:read` (required)
        :type token: str
        :param channel: Channel where the message to get reactions for was posted.
        :type channel: str
        :param file: File to get reactions for.
        :type file: str
        :param file_comment: File comment to get reactions for.
        :type file_comment: str
        :param full: If true always return the complete reaction list.
        :type full: bool
        :param timestamp: Timestamp of the message to get reactions for.
        :type timestamp: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_get_serialize(
            token=token,
            channel=channel,
            file=file,
            file_comment=file_comment,
            full=full,
            timestamp=timestamp,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reactions_get_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:read`")],
        channel: Annotated[Optional[StrictStr], Field(description="Channel where the message to get reactions for was posted.")] = None,
        file: Annotated[Optional[StrictStr], Field(description="File to get reactions for.")] = None,
        file_comment: Annotated[Optional[StrictStr], Field(description="File comment to get reactions for.")] = None,
        full: Annotated[Optional[StrictBool], Field(description="If true always return the complete reaction list.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp of the message to get reactions for.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[List[str]]:
        """reactions_get

        Gets reactions for an item.

        :param token: Authentication token. Requires scope: `reactions:read` (required)
        :type token: str
        :param channel: Channel where the message to get reactions for was posted.
        :type channel: str
        :param file: File to get reactions for.
        :type file: str
        :param file_comment: File comment to get reactions for.
        :type file_comment: str
        :param full: If true always return the complete reaction list.
        :type full: bool
        :param timestamp: Timestamp of the message to get reactions for.
        :type timestamp: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_get_serialize(
            token=token,
            channel=channel,
            file=file,
            file_comment=file_comment,
            full=full,
            timestamp=timestamp,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reactions_get_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:read`")],
        channel: Annotated[Optional[StrictStr], Field(description="Channel where the message to get reactions for was posted.")] = None,
        file: Annotated[Optional[StrictStr], Field(description="File to get reactions for.")] = None,
        file_comment: Annotated[Optional[StrictStr], Field(description="File comment to get reactions for.")] = None,
        full: Annotated[Optional[StrictBool], Field(description="If true always return the complete reaction list.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp of the message to get reactions for.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """reactions_get

        Gets reactions for an item.

        :param token: Authentication token. Requires scope: `reactions:read` (required)
        :type token: str
        :param channel: Channel where the message to get reactions for was posted.
        :type channel: str
        :param file: File to get reactions for.
        :type file: str
        :param file_comment: File comment to get reactions for.
        :type file_comment: str
        :param full: If true always return the complete reaction list.
        :type full: bool
        :param timestamp: Timestamp of the message to get reactions for.
        :type timestamp: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_get_serialize(
            token=token,
            channel=channel,
            file=file,
            file_comment=file_comment,
            full=full,
            timestamp=timestamp,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _reactions_get_serialize(
        self,
        token,
        channel,
        file,
        file_comment,
        full,
        timestamp,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if token is not None:
            
            _query_params.append(('token', token))
            
        if channel is not None:
            
            _query_params.append(('channel', channel))
            
        if file is not None:
            
            _query_params.append(('file', file))
            
        if file_comment is not None:
            
            _query_params.append(('file_comment', file_comment))
            
        if full is not None:
            
            _query_params.append(('full', full))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reactions.get',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def reactions_list(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:read`")],
        user: Annotated[Optional[StrictStr], Field(description="Show reactions made by this user. Defaults to the authed user.")] = None,
        full: Annotated[Optional[StrictBool], Field(description="If true always return the complete reaction list.")] = None,
        count: Optional[StrictInt] = None,
        page: Optional[StrictInt] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ReactionsListSchema:
        """reactions_list

        Lists reactions made by a user.

        :param token: Authentication token. Requires scope: `reactions:read` (required)
        :type token: str
        :param user: Show reactions made by this user. Defaults to the authed user.
        :type user: str
        :param full: If true always return the complete reaction list.
        :type full: bool
        :param count:
        :type count: int
        :param page:
        :type page: int
        :param cursor: Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
        :type cursor: str
        :param limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
        :type limit: int
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_list_serialize(
            token=token,
            user=user,
            full=full,
            count=count,
            page=page,
            cursor=cursor,
            limit=limit,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReactionsListSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reactions_list_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:read`")],
        user: Annotated[Optional[StrictStr], Field(description="Show reactions made by this user. Defaults to the authed user.")] = None,
        full: Annotated[Optional[StrictBool], Field(description="If true always return the complete reaction list.")] = None,
        count: Optional[StrictInt] = None,
        page: Optional[StrictInt] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[ReactionsListSchema]:
        """reactions_list

        Lists reactions made by a user.

        :param token: Authentication token. Requires scope: `reactions:read` (required)
        :type token: str
        :param user: Show reactions made by this user. Defaults to the authed user.
        :type user: str
        :param full: If true always return the complete reaction list.
        :type full: bool
        :param count:
        :type count: int
        :param page:
        :type page: int
        :param cursor: Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
        :type cursor: str
        :param limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
        :type limit: int
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_list_serialize(
            token=token,
            user=user,
            full=full,
            count=count,
            page=page,
            cursor=cursor,
            limit=limit,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReactionsListSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reactions_list_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:read`")],
        user: Annotated[Optional[StrictStr], Field(description="Show reactions made by this user. Defaults to the authed user.")] = None,
        full: Annotated[Optional[StrictBool], Field(description="If true always return the complete reaction list.")] = None,
        count: Optional[StrictInt] = None,
        page: Optional[StrictInt] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """reactions_list

        Lists reactions made by a user.

        :param token: Authentication token. Requires scope: `reactions:read` (required)
        :type token: str
        :param user: Show reactions made by this user. Defaults to the authed user.
        :type user: str
        :param full: If true always return the complete reaction list.
        :type full: bool
        :param count:
        :type count: int
        :param page:
        :type page: int
        :param cursor: Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
        :type cursor: str
        :param limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
        :type limit: int
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_list_serialize(
            token=token,
            user=user,
            full=full,
            count=count,
            page=page,
            cursor=cursor,
            limit=limit,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReactionsListSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _reactions_list_serialize(
        self,
        token,
        user,
        full,
        count,
        page,
        cursor,
        limit,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if token is not None:
            
            _query_params.append(('token', token))
            
        if user is not None:
            
            _query_params.append(('user', user))
            
        if full is not None:
            
            _query_params.append(('full', full))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reactions.list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def reactions_remove(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:write`")],
        name: Annotated[StrictStr, Field(description="Reaction (emoji) name.")],
        file: Annotated[Optional[StrictStr], Field(description="File to remove reaction from.")] = None,
        file_comment: Annotated[Optional[StrictStr], Field(description="File comment to remove reaction from.")] = None,
        channel: Annotated[Optional[StrictStr], Field(description="Channel where the message to remove reaction from was posted.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp of the message to remove reaction from.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ReactionsRemoveSchema:
        """reactions_remove

        Removes a reaction from an item.

        :param token: Authentication token. Requires scope: `reactions:write` (required)
        :type token: str
        :param name: Reaction (emoji) name. (required)
        :type name: str
        :param file: File to remove reaction from.
        :type file: str
        :param file_comment: File comment to remove reaction from.
        :type file_comment: str
        :param channel: Channel where the message to remove reaction from was posted.
        :type channel: str
        :param timestamp: Timestamp of the message to remove reaction from.
        :type timestamp: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_remove_serialize(
            token=token,
            name=name,
            file=file,
            file_comment=file_comment,
            channel=channel,
            timestamp=timestamp,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReactionsRemoveSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reactions_remove_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:write`")],
        name: Annotated[StrictStr, Field(description="Reaction (emoji) name.")],
        file: Annotated[Optional[StrictStr], Field(description="File to remove reaction from.")] = None,
        file_comment: Annotated[Optional[StrictStr], Field(description="File comment to remove reaction from.")] = None,
        channel: Annotated[Optional[StrictStr], Field(description="Channel where the message to remove reaction from was posted.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp of the message to remove reaction from.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[ReactionsRemoveSchema]:
        """reactions_remove

        Removes a reaction from an item.

        :param token: Authentication token. Requires scope: `reactions:write` (required)
        :type token: str
        :param name: Reaction (emoji) name. (required)
        :type name: str
        :param file: File to remove reaction from.
        :type file: str
        :param file_comment: File comment to remove reaction from.
        :type file_comment: str
        :param channel: Channel where the message to remove reaction from was posted.
        :type channel: str
        :param timestamp: Timestamp of the message to remove reaction from.
        :type timestamp: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_remove_serialize(
            token=token,
            name=name,
            file=file,
            file_comment=file_comment,
            channel=channel,
            timestamp=timestamp,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReactionsRemoveSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reactions_remove_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `reactions:write`")],
        name: Annotated[StrictStr, Field(description="Reaction (emoji) name.")],
        file: Annotated[Optional[StrictStr], Field(description="File to remove reaction from.")] = None,
        file_comment: Annotated[Optional[StrictStr], Field(description="File comment to remove reaction from.")] = None,
        channel: Annotated[Optional[StrictStr], Field(description="Channel where the message to remove reaction from was posted.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp of the message to remove reaction from.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """reactions_remove

        Removes a reaction from an item.

        :param token: Authentication token. Requires scope: `reactions:write` (required)
        :type token: str
        :param name: Reaction (emoji) name. (required)
        :type name: str
        :param file: File to remove reaction from.
        :type file: str
        :param file_comment: File comment to remove reaction from.
        :type file_comment: str
        :param channel: Channel where the message to remove reaction from was posted.
        :type channel: str
        :param timestamp: Timestamp of the message to remove reaction from.
        :type timestamp: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reactions_remove_serialize(
            token=token,
            name=name,
            file=file,
            file_comment=file_comment,
            channel=channel,
            timestamp=timestamp,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReactionsRemoveSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _reactions_remove_serialize(
        self,
        token,
        name,
        file,
        file_comment,
        channel,
        timestamp,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if token is not None:
            _header_params['token'] = token
        # process the form parameters
        if name is not None:
            _form_params.append(('name', name))
        if file is not None:
            _form_params.append(('file', file))
        if file_comment is not None:
            _form_params.append(('file_comment', file_comment))
        if channel is not None:
            _form_params.append(('channel', channel))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded', 
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/reactions.remove',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )


