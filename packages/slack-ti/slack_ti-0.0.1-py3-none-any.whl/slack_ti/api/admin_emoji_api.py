# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from slack_ti.models.default_success_template import DefaultSuccessTemplate

from slack_ti.api_client import ApiClient, RequestSerialized
from slack_ti.api_response import ApiResponse
from slack_ti.rest import RESTResponseType


class AdminEmojiApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def admin_emoji_add(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        url: Annotated[StrictStr, Field(description="The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_emoji_add

        Add an emoji.

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :param url: The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
        :type url: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_add_serialize(
            token=token,
            name=name,
            url=url,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_emoji_add_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        url: Annotated[StrictStr, Field(description="The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_emoji_add

        Add an emoji.

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :param url: The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
        :type url: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_add_serialize(
            token=token,
            name=name,
            url=url,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_emoji_add_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        url: Annotated[StrictStr, Field(description="The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_emoji_add

        Add an emoji.

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :param url: The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
        :type url: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_add_serialize(
            token=token,
            name=name,
            url=url,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_emoji_add_serialize(
        self,
        token,
        name,
        url,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if token is not None:
            _form_params.append(('token', token))
        if name is not None:
            _form_params.append(('name', name))
        if url is not None:
            _form_params.append(('url', url))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/admin.emoji.add',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def admin_emoji_add_alias(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        alias_for: Annotated[StrictStr, Field(description="The alias of the emoji.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_emoji_add_alias

        Add an emoji alias.

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :param alias_for: The alias of the emoji. (required)
        :type alias_for: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_add_alias_serialize(
            token=token,
            name=name,
            alias_for=alias_for,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_emoji_add_alias_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        alias_for: Annotated[StrictStr, Field(description="The alias of the emoji.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_emoji_add_alias

        Add an emoji alias.

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :param alias_for: The alias of the emoji. (required)
        :type alias_for: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_add_alias_serialize(
            token=token,
            name=name,
            alias_for=alias_for,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_emoji_add_alias_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        alias_for: Annotated[StrictStr, Field(description="The alias of the emoji.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_emoji_add_alias

        Add an emoji alias.

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :param alias_for: The alias of the emoji. (required)
        :type alias_for: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_add_alias_serialize(
            token=token,
            name=name,
            alias_for=alias_for,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_emoji_add_alias_serialize(
        self,
        token,
        name,
        alias_for,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if token is not None:
            _form_params.append(('token', token))
        if name is not None:
            _form_params.append(('name', name))
        if alias_for is not None:
            _form_params.append(('alias_for', alias_for))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/admin.emoji.addAlias',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def admin_emoji_list(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:read`")],
        cursor: Annotated[Optional[StrictStr], Field(description="Set `cursor` to `next_cursor` returned by the previous call to list items in the next page")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return. Must be between 1 - 1000 both inclusive.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_emoji_list

        List emoji for an Enterprise Grid organization.

        :param token: Authentication token. Requires scope: `admin.teams:read` (required)
        :type token: str
        :param cursor: Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
        :type cursor: str
        :param limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
        :type limit: int
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_list_serialize(
            token=token,
            cursor=cursor,
            limit=limit,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_emoji_list_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:read`")],
        cursor: Annotated[Optional[StrictStr], Field(description="Set `cursor` to `next_cursor` returned by the previous call to list items in the next page")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return. Must be between 1 - 1000 both inclusive.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_emoji_list

        List emoji for an Enterprise Grid organization.

        :param token: Authentication token. Requires scope: `admin.teams:read` (required)
        :type token: str
        :param cursor: Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
        :type cursor: str
        :param limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
        :type limit: int
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_list_serialize(
            token=token,
            cursor=cursor,
            limit=limit,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_emoji_list_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:read`")],
        cursor: Annotated[Optional[StrictStr], Field(description="Set `cursor` to `next_cursor` returned by the previous call to list items in the next page")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of items to return. Must be between 1 - 1000 both inclusive.")] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_emoji_list

        List emoji for an Enterprise Grid organization.

        :param token: Authentication token. Requires scope: `admin.teams:read` (required)
        :type token: str
        :param cursor: Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
        :type cursor: str
        :param limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
        :type limit: int
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_list_serialize(
            token=token,
            cursor=cursor,
            limit=limit,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_emoji_list_serialize(
        self,
        token,
        cursor,
        limit,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if token is not None:
            
            _query_params.append(('token', token))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/admin.emoji.list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def admin_emoji_remove(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_emoji_remove

        Remove an emoji across an Enterprise Grid organization

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_remove_serialize(
            token=token,
            name=name,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_emoji_remove_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_emoji_remove

        Remove an emoji across an Enterprise Grid organization

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_remove_serialize(
            token=token,
            name=name,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_emoji_remove_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_emoji_remove

        Remove an emoji across an Enterprise Grid organization

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_remove_serialize(
            token=token,
            name=name,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_emoji_remove_serialize(
        self,
        token,
        name,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if token is not None:
            _form_params.append(('token', token))
        if name is not None:
            _form_params.append(('name', name))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/admin.emoji.remove',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def admin_emoji_rename(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        new_name: Annotated[StrictStr, Field(description="The new name of the emoji.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> DefaultSuccessTemplate:
        """admin_emoji_rename

        Rename an emoji.

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :param new_name: The new name of the emoji. (required)
        :type new_name: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_rename_serialize(
            token=token,
            name=name,
            new_name=new_name,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def admin_emoji_rename_with_http_info(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        new_name: Annotated[StrictStr, Field(description="The new name of the emoji.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[DefaultSuccessTemplate]:
        """admin_emoji_rename

        Rename an emoji.

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :param new_name: The new name of the emoji. (required)
        :type new_name: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_rename_serialize(
            token=token,
            name=name,
            new_name=new_name,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def admin_emoji_rename_without_preload_content(
        self,
        token: Annotated[StrictStr, Field(description="Authentication token. Requires scope: `admin.teams:write`")],
        name: Annotated[StrictStr, Field(description="The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.")],
        new_name: Annotated[StrictStr, Field(description="The new name of the emoji.")],
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """admin_emoji_rename

        Rename an emoji.

        :param token: Authentication token. Requires scope: `admin.teams:write` (required)
        :type token: str
        :param name: The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included. (required)
        :type name: str
        :param new_name: The new name of the emoji. (required)
        :type new_name: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._admin_emoji_rename_serialize(
            token=token,
            name=name,
            new_name=new_name,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSuccessTemplate",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _admin_emoji_rename_serialize(
        self,
        token,
        name,
        new_name,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if token is not None:
            _form_params.append(('token', token))
        if name is not None:
            _form_params.append(('name', name))
        if new_name is not None:
            _form_params.append(('new_name', new_name))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'slackAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/admin.emoji.rename',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )


