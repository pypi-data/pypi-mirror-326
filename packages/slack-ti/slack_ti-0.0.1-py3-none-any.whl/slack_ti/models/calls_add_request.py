# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CallsAddRequest(BaseModel):
    """
    CallsAddRequest
    """ # noqa: E501
    external_unique_id: StrictStr = Field(description="An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.")
    external_display_id: Optional[StrictStr] = Field(default=None, description="An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.")
    join_url: StrictStr = Field(description="The URL required for a client to join the Call.")
    desktop_app_join_url: Optional[StrictStr] = Field(default=None, description="When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.")
    date_start: Optional[StrictInt] = Field(default=None, description="Call start time in UTC UNIX timestamp format")
    title: Optional[StrictStr] = Field(default=None, description="The name of the Call.")
    created_by: Optional[StrictStr] = Field(default=None, description="The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required.")
    users: Optional[StrictStr] = Field(default=None, description="The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users).")
    __properties: ClassVar[List[str]] = ["external_unique_id", "external_display_id", "join_url", "desktop_app_join_url", "date_start", "title", "created_by", "users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallsAddRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallsAddRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "external_unique_id": obj.get("external_unique_id"),
            "external_display_id": obj.get("external_display_id"),
            "join_url": obj.get("join_url"),
            "desktop_app_join_url": obj.get("desktop_app_join_url"),
            "date_start": obj.get("date_start"),
            "title": obj.get("title"),
            "created_by": obj.get("created_by"),
            "users": obj.get("users")
        })
        return _obj


