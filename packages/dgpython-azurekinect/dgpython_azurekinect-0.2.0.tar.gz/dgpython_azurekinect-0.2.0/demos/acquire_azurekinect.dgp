from dataguzzler_python import dgpy
import spatialnde2 as snde

include(dgpy,"dgpy_startup.dpi") # If you get a NameError here, be sure you are executing this file with dataguzzler-python

include(dgpy,"Qt.dpi",prefer_pyqt=False) 

include(dgpy,"matplotlib.dpi")
include(snde,"recdb.dpi",enable_opencl=True)
include(snde,"recdb_gui.dpi")

import dgpython_azurekinect as ak

import time

dgpython_release_main_thread()

k4a = ak.K4A("k4a",recdb, None, "/k4achan" )
k4a.depth_data_mode = "POINTCLOUD"

# Illustration of how to add dynamic metadata:
#k4a.dynamic_metadata.AddStaticMetaDatum("/k4achan","testmd","testmd_value")
#k4a.dynamic_metadata.AddDynamicMetaDatum("/k4achan","testmd2",lambda: k4a.depth_mode)

k4a.running=True # Start capture




#time.sleep(2)
#monitor = recdb.start_monitoring_globalrevs()
#monitor.wait_next(recdb) # Ignore any blank initial frame

#for cnt in range(500):
#    globalrev = monitor.wait_next(recdb)
#
#    chan_data = globalrev.get_recording_ref("/k4achan")
#    print(chan_data.data())
#    pass
#monitor.close(recdb) # Stop monitoring. If you fail to do this data will start accumulating and eventually run you out of file descriptors or fill up memory


# Some example commands:
# k4a.camera_fps = ak.K4A_FRAMES_PER_SECOND_15   # (required for WFOV depth mode)
# k4a.depth_mode = ak.K4A_DEPTH_MODE_WFOV_UNBINNED

main_viewer.viewer.set_camera_pose("/k4achan",np.array(([1,0,0,  0.        ], [ 0,0,0.4,  1]),dtype=[('quat', '<f4', (4,)), ('offset', '<f4', (4,))]))
main_viewer.viewer.set_rotation_center_dist("/k4achan",2)