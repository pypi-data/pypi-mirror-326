name: "Test Publish"

on:
  workflow_dispatch:

jobs:

  generate_version:
    name: "Generate Random Version"
    runs-on: ubuntu-latest
    outputs:
      random_version: ${{ steps.set_version.outputs.random_version }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Install Poetry
        run: pip install poetry>=2.0.0

      - name: Generate Randomized Alpha Version
        id: set_version
        run: |
          BASE_VERSION=$(poetry version | awk '{print $2}')
          RANDOM_VERSION="${BASE_VERSION}a$(date +%s)"
          echo "Generated Version: $RANDOM_VERSION"
          echo "random_version=$RANDOM_VERSION" >> $GITHUB_OUTPUT

  pypi:
    name: "Build and Publish Test Release"
    needs: generate_version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv and Dependencies
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: dev
        run: pip install poetry>=2.0.0

      - name: Set Version from generate_version
        run: |
          poetry version ${{ needs.generate_version.outputs.random_version }}

      - name: Build
        run: uv build

      - name: Publish to TestPyPI
        run: uv publish -t ${{ secrets.THE_PYPI_TOKEN }}

  build_docker_amd:
    name: "Build and Publish for AMD"
    needs: generate_version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Publish Docker Images
        env:
          VERSION: ${{ needs.generate_version.outputs.random_version }}
        run: |
          cd ..
          # Build for AMD64
          docker buildx create --use --name single-arch-builder
          docker buildx build --platform linux/amd64 \
            -f Upsonic/Dockerfile \
            --push \
            --load \
            -t upsonic/server_test:$VERSION-amd64 \
            .
          docker push upsonic/server_test:$VERSION-amd64

  build_docker_arm:
    name: "Build and Publish for ARM"
    needs: generate_version
    runs-on: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Publish Docker Images for ARM
        env:
          VERSION: ${{ needs.generate_version.outputs.random_version }}
        run: |
          cd ..
          # Build for ARM64
          docker buildx create --use --name single-arch-builder
          docker buildx build --platform linux/arm64 \
            -f Upsonic/Dockerfile \
            --push \
            --load \
            -t upsonic/server_test:$VERSION-arm64 \
            .
          docker push upsonic/server_test:$VERSION-arm64

  create_manifest:
    name: "Create Multi-Architecture Manifest"
    needs: [generate_version, build_docker_amd, build_docker_arm]
    runs-on: ubuntu-latest

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and Push Manifest
        env:
          VERSION: ${{ needs.generate_version.outputs.random_version }}
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          mkdir -p ~/.docker
          echo '{"experimental": "enabled"}' > ~/.docker/config.json
          
          # Pull the images first to ensure we have the correct manifests locally
          docker pull upsonic/server_test:$VERSION-amd64
          docker pull upsonic/server_test:$VERSION-arm64
          
          # Remove existing manifest if it exists
          docker manifest rm upsonic/server_test:$VERSION || true
          
          # Create and push the manifest
          docker manifest create upsonic/server_test:$VERSION \
            upsonic/server_test:$VERSION-amd64 \
            upsonic/server_test:$VERSION-arm64

          # Annotate the manifest with architecture and OS information
          docker manifest annotate upsonic/server_test:$VERSION \
            upsonic/server_test:$VERSION-amd64 --arch amd64 --os linux
          docker manifest annotate upsonic/server_test:$VERSION \
            upsonic/server_test:$VERSION-arm64 --arch arm64 --os linux

          # Inspect before pushing to verify
          docker manifest inspect upsonic/server_test:$VERSION

          # Push the manifest
          docker manifest push --purge upsonic/server_test:$VERSION