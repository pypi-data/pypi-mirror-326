[project]
name = "rago"
version = "0.11.3"  # semantic-release
description = "Rago is a lightweight framework for RAG"
readme = "README.md"
authors = [
  { name = "Ivan Ogasawara", email = "ivan.ogasawara@gmail.com" }
]
packages = [
  {include = "rago", from="src"},
]
license = "BSD 3 Clause"
exclude = [
  ".git/*",
  ".env*",
]
include = ["src/rago/py.typed"]
requires-python = ">=3.9,<4"

dependencies = [
  "typeguard >=4.0",
  "faiss-cpu >=1.9.0",
  "sentencepiece >=0.2.0",
  "sentence-transformers >=3.2.0",
  "transformers >=4",
  "langdetect >=1",
  "openai >=1.52.2",
  "google-generativeai >=0.8.3",
  "pypdf >=5",
  "langchain >=0.3.7",
  "langchain-community >=0.3.7",
  "spacy >=3",
  "instructor >=1",
  "pydantic >=2",
  "torch >=2.5",
  "torchvision >=0.20",
  "eval-type-backport >=0.2 ; python_version < '3.10'",
  "joblib (>=1.4.2,<2.0.0)",
]

[build-system]
requires = ["poetry-core>=2", "poetry>=2"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
cpu = ["torch", "torchvision"]
gpu = ["torch", "torchvision"]

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "supplemental"

[tool.poetry.dependencies]
python = ">=3.9,<4"
torch = [
  {version = ">=2.5.0", markers="extra!='gpu'", source="pytorch-cpu"},
  {version = ">=2.5.0", markers="extra=='gpu'"},
]
torchvision = [
  {version = ">=0.20.0", markers="extra!='gpu'", source="pytorch-cpu"},
  {version = ">=0.20.0", markers="extra=='gpu'"},
]

[tool.poetry.group.dev.dependencies]
pytest = ">=7.3.2"
pytest-cov = ">=4.1.0"
coverage = ">=7.2.7"
pre-commit = ">=3.3.2"
ruff = ">=0.2.0"
mypy = ">=1.5.0"
bandit = ">=1.7.5"
vulture = ">=2.7"
mccabe = ">=0.6.1"
ipython = "<8"
ipykernel = ">=6.0.0"
Jinja2 = ">=3.1.2"
mkdocs = ">=1.4.3"
mkdocs-exclude = ">=1.0.2"
mkdocs-jupyter = ">=0.24.1"
mkdocs-literate-nav = ">=0.6.0"
mkdocs-macros-plugin = ">=0.7.0,<1"
mkdocs-material = ">=9.1.15"
mkdocstrings = ">=0.21.2"
mkdocstrings-python = ">= 1.1.2"
mkdocs-gen-files = ">=0.5.0"
makim = "1.19.0"
# 'PosixPath' object has no attribute 'endswith'
virtualenv = "<=20.25.1"
python-dotenv = ">=1.0"
# note: Version 3.7.1 requries spaCy >=3.7.2,<3.8.0
en-core-web-md = {url = "https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.8.0/en_core_web_md-3.8.0-py3-none-any.whl"}

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
markers = [
    "skip_on_ci: Skip these tests in CI",
]

[tool.bandit]
exclude_dirs = ["tests"]
targets = "./"

[tool.vulture]
exclude = ["tests"]
ignore_decorators = []
ignore_names = []
make_whitelist = true
min_confidence = 80
paths = ["./"]
sort_by_size = true
verbose = false

[tool.ruff]
line-length = 79
force-exclude = true
src = ["./"]
exclude = [
  'docs',
]
fix = true

[tool.ruff.lint]
select = [
  "E",   # pycodestyle
  "F",   # pyflakes
  "D",   # pydocstyle
  "YTT", # flake8-2020
  "RUF", # Ruff-specific rules
  "I001",  # isort
]
fixable = ["I001"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
# Use a single line between direct and from import
lines-between-types = 1

[tool.ruff.format]
quote-style = "single"

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
strict = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
exclude = ["scripts/"]
