import numpy as np

pathways_dtypes = {
    "ligand": str,
    "receptor": str,
    "em": str,
    "target": str,
    "sender": str,
    "receiver": str,
    "ligand_sclog2fc": np.float64,
    "receptor_sclog2fc": np.float64,
    "em_sclog2fc": np.float64,
    "target_sclog2fc": np.float64,
    "path": str,
    "log2fc": np.float64,
    "afc": np.float64,
    "ligand_pr_log2fc": np.float64,
    "ligand_pr_afc": np.float64,
    "receptor_pr_log2fc": np.float64,
    "receptor_pr_afc": np.float64,
    "em_pr_log2fc": np.float64,
    "em_pr_afc": np.float64,
    "target_pr_log2fc": np.float64,
    "target_pr_afc": np.float64,
    "ligand_ps_log2fc": np.float64,
    "ligand_ps_afc": np.float64,
    "receptor_ps_log2fc": np.float64,
    "receptor_ps_afc": np.float64,
    "em_ps_log2fc": np.float64,
    "em_ps_afc": np.float64,
    "target_ps_log2fc": np.float64,
    "target_ps_afc": np.float64,
    "ligand_py_log2fc": np.float64,
    "ligand_py_afc": np.float64,
    "receptor_py_log2fc": np.float64,
    "receptor_py_afc": np.float64,
    "em_py_log2fc": np.float64,
    "em_py_afc": np.float64,
    "target_py_log2fc": np.float64,
    "target_py_afc": np.float64,
    "sc_up": np.int8,
    "sc_down": np.int8,
    "pr_up": np.int8,
    "pr_down": np.int8,
    "ps_up": np.int8,
    "ps_down": np.int8,
    "py_up": np.int8,
    "py_down": np.int8,
    "tpds": np.float64,
    "pr_score": np.float64,
    "ps_score": np.float64,
    "py_score": np.float64,
    "ppds": np.float64,
    "final_score_wkinase": np.float64,
    "sik_r_of_em": str,
    "sik_r_of_t": str,
    "sik_em_of_t": str,
    "sik_em_of_r": str,
    "sik_t_of_r": str,
    "sik_t_of_em": str,
    "kinase_r_of_em_eicondition1": str,
    "kinase_r_of_em_eicondition2": str,
    "kinase_r_of_t_eicondition1": str,
    "kinase_r_of_t_eicondition2": str,
    "kinase_em_of_t_eicondition1": str,
    "kinase_em_of_t_eicondition2": str,
    "kinase_score_5x": np.float64,
    "kinase_score_wt": np.float64,
}

clusters_dtypes = {
    "type": str,
    "condition": str,
    "population": np.float64,  # fraction of total
}
